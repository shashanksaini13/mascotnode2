import type { Content, NormalizedParseError, Path, TextLocation, JSONData, TextContent } from '../types';
/**
 * Parse the JSON. if this fails, try to repair and parse.
 * Throws an exception when the JSON is invalid and could not be parsed.
 */
export declare function parseAndRepair(jsonText: string): JSONData;
/**
 * Parse the JSON and if needed repair it.
 * When not valid, undefined is returned.
 */
export declare function parseAndRepairOrUndefined(partialJson: string): JSONData | undefined;
export declare function parsePartialJson(partialJson: string, parse?: (text: string, reviver?: (this: any, key: string, value: any) => any) => any): JSONData;
/**
 * Repair partial JSON
 */
export declare function repairPartialJson(partialJson: string): string;
/**
 * Normalize a parse error message like
 *     "Unexpected token i in JSON at position 4"
 * or
 *     "JSON.parse: expected property name or '}' at line 2 column 3 of the JSON data"
 * and return the line and column numbers in an object
 *
 * Note that the returned line and column number in the object are zero-based,
 * and in the message are one based (human readable)
 */
export declare function normalizeJsonParseError(jsonText: string, parseErrorMessage: string): NormalizedParseError;
/**
 * Calculate the position in the text based on a line and column number
 * @param text
 * @param line     Zero-based line number
 * @param column   Zero-based column number
 */
export declare function calculatePosition(text: string, line: number, column: number): number | null;
export declare function countCharacterOccurrences(text: string, character: string, start?: number, end?: number): number;
/**
 * Find the text location of a JSON path
 */
export declare function findTextLocation(text: string, path: Path): TextLocation | null;
/**
 * Convert a JSON object, array, or value to another type
 * If it cannot be converted, an error is thrown
 */
export declare function convertValue(value: JSONData, type: 'value' | 'object' | 'array'): JSONData;
/**
 * Check whether provided value is valid a content type for JSONEditor
 * Returns a string with validation error message when there is an issue,
 * or null otherwise
 */
export declare function validateContentType(content: unknown): string | null;
/**
 * Check whether content contains text (and not JSON)
 */
export declare function isTextContent(content: Content): content is TextContent;
/**
 * Returns true when the (estimated) size of the contents exceeds the
 * provided maxSize.
 * @param content
 * @param maxSize  Maximum content size in bytes
 */
export declare function isLargeContent(content: Content, maxSize: number): boolean;
/**
 * A rough, fast estimation on whether a document is larger than given size
 * when serialized.
 *
 * maxSize is an optional max size in bytes. When reached, size estimation will
 * be cancelled. This is useful when you're only interested in knowing whether
 * the size exceeds a certain maximum size.
 */
export declare function estimateSerializedSize(content: Content, maxSize?: number): number;
