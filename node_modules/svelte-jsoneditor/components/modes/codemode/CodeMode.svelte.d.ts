import { SvelteComponentTyped } from "svelte";
declare const __propDef: {
    props: {
        readOnly?: boolean;
        mainMenuBar?: boolean;
        statusBar?: boolean;
        text?: string;
        indentation?: number | string;
        tabSize?: number;
        escapeUnicodeCharacters?: boolean;
        validator?: any;
        /** @type {((text: string, previousText: string) => void) | null} */ onChange?: any;
        onSwitchToTreeMode?: (...args: any[]) => void;
        onError: any;
        onFocus?: (...args: any[]) => void;
        onBlur?: (...args: any[]) => void;
        onRenderMenu?: (...args: any[]) => void;
        onSortModal: any;
        onTransformModal: any;
        focus?: () => void;
        patch?: (operations: any) => {
            json: import("immutable-json-patch").JSONData;
            previousJson: any;
            undo: import("immutable-json-patch").JSONPatchDocument;
            redo: any;
        };
        openTransformModal?: ({ id, selectedPath, onTransform, onClose }: {
            id: any;
            selectedPath: any;
            onTransform: any;
            onClose: any;
        }) => void;
        refresh?: () => void;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type CodeModeProps = typeof __propDef.props;
export declare type CodeModeEvents = typeof __propDef.events;
export declare type CodeModeSlots = typeof __propDef.slots;
export default class CodeMode extends SvelteComponentTyped<CodeModeProps, CodeModeEvents, CodeModeSlots> {
    get focus(): () => void;
    get patch(): (operations: any) => {
        json: import("immutable-json-patch").JSONData;
        previousJson: any;
        undo: import("immutable-json-patch").JSONPatchDocument;
        redo: any;
    };
    get openTransformModal(): ({ id, selectedPath, onTransform, onClose }: {
        id: any;
        selectedPath: any;
        onTransform: any;
        onClose: any;
    }) => void;
    get refresh(): () => void;
}
export {};
