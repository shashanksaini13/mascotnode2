import { SvelteComponentTyped } from "svelte";
import type { Validator } from '../../../types';
declare const __propDef: {
    props: {
        readOnly?: boolean;
        externalContent: any;
        mainMenuBar?: boolean;
        navigationBar?: boolean;
        escapeControlCharacters?: boolean;
        escapeUnicodeCharacters?: boolean;
        validator?: Validator;
        indentation?: number | string;
        onError: any;
        /** @type {(content: Content, previousContent: Content, patchResult: JSONPatchResult | null) => void} */ onChange: any;
        /** @type {(props: RenderValueProps) => RenderValueComponentDescription[]} */ onRenderValue: any;
        onRequestRepair?: (...args: any[]) => void;
        onRenderMenu?: (...args: any[]) => void;
        /** @type {function (path: Path, value: *) : string} */ onClassName: any;
        onFocus: any;
        onBlur: any;
        onSortModal: any;
        onTransformModal: any;
        expand?: (callback?: () => boolean) => void;
        get?: () => any;
        patch?: (operations: any, afterPatch: any) => {
            json: any;
            previousJson: any;
            undo: import("immutable-json-patch").JSONPatchDocument;
            redo: any;
        };
        acceptAutoRepair?: () => {
            json: any;
            text: any;
        };
        openTransformModal?: ({ id, selectedPath, onTransform, onClose }: {
            id: any;
            selectedPath: any;
            onTransform: any;
            onClose: any;
        }) => void;
        scrollTo?: (path: any) => Promise<void>;
        findElement?: (path: any) => any;
        focus?: () => void;
    };
    events: {
        [evt: string]: CustomEvent<any>;
    };
    slots: {};
};
export declare type TreeModeProps = typeof __propDef.props;
export declare type TreeModeEvents = typeof __propDef.events;
export declare type TreeModeSlots = typeof __propDef.slots;
export default class TreeMode extends SvelteComponentTyped<TreeModeProps, TreeModeEvents, TreeModeSlots> {
    get expand(): (callback?: () => boolean) => void;
    get get(): () => any;
    get patch(): (operations: any, afterPatch: any) => {
        json: any;
        previousJson: any;
        undo: import("immutable-json-patch").JSONPatchDocument;
        redo: any;
    };
    get acceptAutoRepair(): () => {
        json: any;
        text: any;
    };
    get openTransformModal(): ({ id, selectedPath, onTransform, onClose }: {
        id: any;
        selectedPath: any;
        onTransform: any;
        onClose: any;
    }) => void;
    get scrollTo(): (path: any) => Promise<void>;
    get findElement(): (path: any) => any;
    get focus(): () => void;
}
export {};
