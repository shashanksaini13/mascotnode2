import type { JSONPatchDocument } from '../types';
/**
 * Create a JSONPatch for an insert operation.
 *
 * This function needs the current data in order to be able to determine
 * a unique property name for the inserted node in case of duplicating
 * and object property
 *
 * @param {JSON} json
 * @param {JSON} state
 * @param {Path} path
 * @param {ClipboardValues} values
 * @return {JSONPatchDocument}
 */
export declare function insertBefore(json: any, state: any, path: any, values: any): any;
/**
 * Create a JSONPatch for an append operation. The values will be appended
 * to the end of the array or object.
 *
 * This function needs the current data in order to be able to determine
 * a unique property name for the inserted node in case of duplicating
 * and object property
 *
 * @param {JSON} json
 * @param {Path} path
 * @param {ClipboardValues} values
 * @return {JSONPatchDocument}
 */
export declare function append(json: any, path: any, values: any): any;
/**
 * Rename an object key
 * Not applicable to arrays
 *
 * @param {Path} parentPath
 * @param {string[]} keys
 * @param {string} oldKey
 * @param {string} newKey
 * @returns {JSONPatchDocument}
 */
export declare function rename(parentPath: any, keys: any, oldKey: any, newKey: any): any[];
/**
 * Create a JSONPatch for an insert operation.
 *
 * This function needs the current data in order to be able to determine
 * a unique property name for the inserted node in case of duplicating
 * and object property
 *
 * @param {JSON} json
 * @param {JSON} state
 * @param {Path[]} paths
 * @param {ClipboardValues} values
 * @return {JSONPatchDocument}
 */
export declare function replace(json: any, state: any, paths: any, values: any): any[];
/**
 * Create a JSONPatch for a duplicate action.
 *
 * This function needs the current data in order to be able to determine
 * a unique property name for the duplicated node in case of duplicating
 * and object property
 *
 * @param {JSON} json
 * @param {JSON} state
 * @param {Path[]} paths
 * @return {JSONPatchDocument}
 */
export declare function duplicate(json: any, state: any, paths: any): any[];
/**
 * Create a JSONPatch for an extract action.
 *
 * @param {JSON} json
 * @param {JSON} state
 * @param {Selection} selection
 * @return {JSONPatchDocument}
 */
export declare function extract(json: any, state: any, selection: any): {
    op: string;
    from: string;
    path: string;
}[] | {
    op: string;
    path: string;
    value: any;
}[];
/**
 * @param {JSON} json
 * @param {JSON} state
 * @param {Selection} selection
 * @param {string} clipboardText
 * @return {JSONPatchDocument}
 */
export declare function insert(json: any, state: any, selection: any, clipboardText: any): any;
/**
 * @param {JSON} json
 * @param {JSON} state
 * @param {Selection} selection
 * @param {DragInsideAction} dragInsideAction
 */
export declare function moveInsideParent(json: any, state: any, selection: any, dragInsideAction: any): JSONPatchDocument;
export declare function createNewValue(json: any, selection: any, type: any): any;
/**
 * Create a JSONPatch for a remove operation
 * @param {Path} path
 * @return {JSONPatchDocument}
 */
export declare function remove(path: any): {
    op: string;
    path: string;
}[];
/**
 * Create a JSONPatch for a multiple remove operation
 * @param {Path[]} paths
 * @return {JSONPatchDocument}
 */
export declare function removeAll(paths: any): any;
/**
 * @param {string} clipboardText
 * @returns {Array.<{key: string, value: *}>}
 */
export declare function clipboardToValues(clipboardText: any): {
    key: string;
    value: import("../types").JSONData;
}[];
/**
 * @param {JSON} json
 * @param {JSON} state
 * @param {Selection} selection
 * @returns {{newSelection: Selection, operations: JSONPatchDocument}}
 */
export declare function createRemoveOperations(json: any, state: any, selection: any): {
    operations: {
        op: string;
        path: string;
        value: string;
    }[];
    newSelection: any;
} | {
    operations: any;
    newSelection: import("../types").Selection;
};
