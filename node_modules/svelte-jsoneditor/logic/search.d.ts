import type { JSONData, JSONPatchDocument, SearchResultItem, Selection } from '../types';
export declare function updateSearchResult(json: any, flatResults: any, previousResult: any): {
    items: {};
    itemsWithActive: import("immutable-json-patch").JSONData;
    flatItems: any;
    count: any;
    activeItem: any;
    activeIndex: any;
};
/**
 * @param {JSON} referenceJson
 * @param {SearchResultItem[]} flatResults
 * @returns {{}}
 */
export declare function createRecursiveSearchResults(referenceJson: any, flatResults: any): {};
/**
 * @param {SearchResult} searchResult
 * @return {SearchResult}
 */
export declare function searchNext(searchResult: any): any;
/**
 * @param {SearchResult} searchResult
 * @return {SearchResult}
 */
export declare function searchPrevious(searchResult: any): any;
export declare function search(searchText: any, json: any, state: any, maxResults?: number): any[];
/**
 * Do a case insensitive search for a search text in a text
 * @param {String} text
 * @param {String} searchTextLowerCase
 * @param {Path} path
 * @param {Symbol} field
 * @param {(searchResultItem: SearchResultItem) => void} onMatch
 */
export declare function findCaseInsensitiveMatches(text: any, searchTextLowerCase: any, path: any, field: any, onMatch: any): void;
/**
 * Replace a search result item with a replacement text
 * @param {string} text
 * @param {string} replacementText
 * @param {number} start
 * @param {number} end
 */
export declare function replaceText(text: any, replacementText: any, start: any, end: any): any;
/**
 * Replace all matches with a replacement text
 * @param {string} text
 * @param {string} replacementText
 * @param {Array<{start: number, end: number}>} occurrences
 * @return {string}
 */
export declare function replaceAllText(text: any, replacementText: any, occurrences: any): any;
/**
 * @param {JSON} json
 * @param {JSON} state
 * @param {string} replacementText
 * @param {SearchResultItem} searchResultItem
 */
export declare function createSearchAndReplaceOperations(json: any, state: any, replacementText: any, searchResultItem: any): {
    newSelection: Selection;
    operations: JSONPatchDocument;
};
export declare function createSearchAndReplaceAllOperations(json: JSONData, state: JSONData, searchText: string, replacementText: any): {
    newSelection: Selection;
    operations: JSONPatchDocument;
};
/**
 * Split the text into separate parts for each search result and the text
 * in between.
 */
export declare function splitValue(text: string, matches: SearchResultItem[]): Array<{
    text: string;
    type: 'normal' | 'highlight';
    active: boolean;
}>;
