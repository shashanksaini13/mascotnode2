export const nodeId = "id";

export const atlas_rowId = "atlas_rowId";

export const ScaleType = ["linear", "power", "log", "sqrt", "symlog", "identity", "time", "ordinal", "band", "point", "ordinalColor", "sequentialColor", "divergingColor"]; 

export const CurveMode = {
	Natural: "natural",
	Basis: "basis",
	BumpX: "bumpX",
	BumpY: "bumpY",
	Linear: "linear",
	Step: "step",
	CatmullRom: "CatmullRom",
	Cardinal: "cardinal"
}

export const LayoutType = {
	Grid: "grid",
	Circular: "circular",
	Stack: "stack",
	Treemap: "treemap",
	Packing: "packing",
	Force: "force",
	TidyTree: "tidytree",
	Sugiyama: "sugiyama",
	Strata: "strata"
}

export const Orientation = {
	Vertical: "vertical",
	Horizontal: "horizontal",
	Angular: "angular",
	Radial: "radial"
}

export const Direction = {
	Up: "up",
	Down: "down",
	Left: "left",
	Right: "right",
	Inward: "inward",
	Outward: "outward",
	Clockwise: "clockwise",
	Anticlockwise: "anticlockwise"
}

export const Alignment = {
	Top: "top",
	Left: "left",
	Bottom: "bottom",
	Right: "right",
	Center: "center",
	Middle: "middle"
}

export const ConstraintType = {
	Align: "alignment",
	Distribute: "distribution", 
	Affix: "affixation"
}

// export const RotationDirection = {
// 	Clockwise: "clockwise",
// 	Anticlockwise: "anticlockwise"
// }

export const ItemType = {
	Area: "area",
	Rect: "rect",
	Ellipse: "ellipse",
	Circle: "circle",
	Pie: "pie",
	Ring: "ring",
	Arc: "arc",
	Line: "line",
	Path: "path",
	Image: "image",
	PointText: "pointText",
	Collection: "collection",
	Group: "group",
	Scene: "scene",
	Axis: "axis",
	Glyph: "glyph",
	Legend: "legend",
	Polygon: "polygon",
	Gridlines: "gridlines",
	LinearGradient: "LinearGradient",
	Link: "link",
	DataTable: "datatable"
}

export const DataType = {
	Boolean: "boolean", 
	Integer: "integer",
	Number: "number",
	Date: "date",
	String: "string"
}

export const Aggregator = {
	Max: "max",
	Min: "min",
	Avg: "avg",
	Median: "median",
	Sum: "sum",
	Count: "count",
	Mean: "mean",
	Percentile25: "percentile 25",
	Percentile75: "percentile 75"
}


export const Style2SVG = {
	"fillColor": "fill",
	"strokeColor": "stroke",
	"strokeWidth": "stroke-width",
	"fillOpacity": "fill-opacity",
	"strokeOpacity": "stroke-opacity",
	"strokeDash": "stroke-dasharray",
	"opacity": "opacity",
	"fontSize": "font-size",
	"fontFamily": "font-family",
	"fontWeight": "font-weight",
	"visibility": "visibility"
}

export const Warnings = {
	INCORRECT_AXIS_INFO: "Cannot find relevant information to create an axis for ",
	INCORRECT_LEGEND_INFO: "Cannot find relevant information to create a legend for ",
	UNSUPPORTED_SCALE_TYPE_CHANGE: "Cannot change scale type to "
}

export const Errors = {
	FIELD_NONEXISTENT : "Data field does not exist in the data table",
	INCOMPLETE_REPEAT_INFO : "Incomplete information to do repeat. You must specify an item, a categorical data field and a data table",
	REPEAT_BY_NONCAT: "Repeat only works on a string or date field",
	PARTITION_BY_NONCAT: "Divide only works on a string or date field",
	DENSIFY_BY_NONCAT: "Densify only works on a string or date field",
	INCOMPLETE_REPOPULATE_INFO : "Incomplete information to re-populate. You must specify an item, a categorical data field and a data table",
	REPOPULATE_BY_NONCAT: "Repopulate only works on a string or date field",
	REPOPULATE_DT_MISMATCH: "Cannot repopulate with a data table that is different from the item's parent's data table",
	COMPNT_NON_REPEATABLE: "Item not repeatable",
	REPEAT_NODE_LINK: "To repeat with a tree or a network, you need to provide two marks, one for node and one for link",
	INCOMPLETE_PARTITION_INFO : "Incomplete information to divide. You must specify an item, a categorical data field and a data table",
	COMPNT_NON_PARTITIONABLE: "Item cannot be divided",
	INCOMPLETE_DENSIFY_INFO : "Incomplete information to densify. You must specify an item, a categorical data field and a data table",
	COMPNT_NON_DENSIFIABLE: "Item cannot be densified",
	STRATIFY_WITHOUT_TREE: "Stratify only works on a tree dataset",
	STRATIFY_WRONG_ITEM: "Stratify only works on a circle or a rectangle",
	BIND_WITHOUT_DATASCOPE: "Item must be repeated or divided by data first before applyng binding",
	UNKNOWN_ALIGNMENT: "Unkown alignment",
	UNKNOWN_Orientation: "Unkown orientation",
	UNKNOWN_DIRECTION: "Unkown direction",
	UNKOWNN_SCALE_TYPE: "Unknown scale type",
	UNKNOWN_ANCHOR: "Unknown anchor",
	INCOMPLETE_BINDING_INFO: "Incomplete binding information. You must specify an item, a data field and a visual channel",
	MULTIPLE_VALUES_PER_FIELD: "Multiple distinct field values exist",
	DIFFERENT_SCALE_TYPE: "Cannot merge different types of scale",
	INSUFFICIENT_DATA_SCOPES: "Insufficient data to divide or densify a mark",
	INCORRECT_CONSTRAINT_INFO: "Constrain information is incorreclty passed",
	FEATURE_NOT_IMPLEMENTED: "This feature has not been implemented yet",
	LAYOUT_WITHOUT_TREE: "The layout can only be applied to a tree",
	UNSUPPORTED_FIELDTYPE: "Unsupported field type for encoding ",
	CANNOT_CLASSIFY: "Cannot classify items in ",
	CANNOT_CREATE_GLYPH: "Cannot create glyph. A glyph must consist of only paths or only texts, not a mixture of paths and texts"
}

export const categoricalColorSchemes = [
	"schemeCategory10", "schemeAccent", "schemeDark2", "schemePaired", "schemePastel1", "schemePastel2", "schemeSet1", "schemeSet2", "schemeSet3", "schemeTableau10"
]

export const divergingColorSchemes = [
	"schemeBrBG", "schemePRGn", "schemePiYG", "schemePuOr", "schemeRdBu", "schemeRdGy", "schemeRdYlBu", "schemeRdYlGn", "schemeSpectral"
]

export const sequentialColorSchemes = [
	"schemeBlues", "schemeGreens", "schemeGreys", "schemeOranges", "schemePurples", "schemeReds", "schemeBuGn", "schemeBuPu", "schemeGnBu", "schemeOrRd", "schemePuBuGn", "schemePuBu", "schemePuRd", "schemeRdPu", "schemeYlGnBu", "schemeYlGn", "schemeYlOrBr", "schemeYlOrRd"
]
