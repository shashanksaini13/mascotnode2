{"version":3,"sources":["../../src/immutableJSONPatch.js"],"names":["immutableJSONPatch","json","operations","options","updatedJson","i","length","validateJSONPatchOperation","operation","preprocessJSONPatchOperation","before","result","undefined","previousJson","patchOp","PATCH_OPS","op","test","Error","JSON","stringify","after","add","remove","replace","copy","move","path","value","isArrayItem","from","removedJson","actualValue","parent","Array","isArray","resolvePathIndex","parentPath","concat","ops","includes"],"mappings":"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","sourcesContent":["import {\n  deleteIn,\n  existsIn,\n  getIn,\n  insertAt,\n  setIn\n} from './immutabilityHelpers.js'\nimport { compileJSONPointer, parseJSONPointer } from './jsonPointer.js'\nimport { initial, isEqual, last } from './utils.js'\n\n/**\n * Apply a patch to a JSON object\n * The original JSON object will not be changed,\n * instead, the patch is applied in an immutable way\n * @param {JSONData} json\n * @param {JSONPatchDocument} operations    Array with JSON patch actions\n * @param {JSONPatchOptions} [options]\n * @return {JSONData} Returns the updated json\n */\nexport function immutableJSONPatch (json, operations, options) {\n  let updatedJson = json\n\n  for (let i = 0; i < operations.length; i++) {\n    validateJSONPatchOperation(operations[i])\n\n    let operation = preprocessJSONPatchOperation(updatedJson, operations[i])\n\n    // TODO: test before\n    if (options && options.before) {\n      const result = options.before(updatedJson, operation)\n      if (result !== undefined) {\n        if (result.json !== undefined) {\n          updatedJson = result.json\n        }\n        if (result.operation !== undefined) {\n          operation = result.operation\n        }\n      }\n    }\n\n    const previousJson = updatedJson\n    const patchOp = PATCH_OPS[operation.op]\n    if (patchOp) {\n      updatedJson = patchOp(updatedJson, operation)\n    } else if (operation.op === 'test') {\n      test(updatedJson, operation)\n    } else {\n      throw new Error('Unknown JSONPatch operation ' + JSON.stringify(operation.op))\n    }\n\n    // TODO: test after\n    if (options && options.after) {\n      const result = options.after(updatedJson, operation, previousJson)\n      if (result !== undefined) {\n        updatedJson = result\n      }\n    }\n  }\n\n  return updatedJson\n}\n\nconst PATCH_OPS = {\n  add,\n  remove,\n  replace,\n  copy,\n  move\n}\n\n/**\n * Replace an existing item\n * @param {JSONData} json\n * @param {{ path: JSONPath, value: JSONData }} operation\n * @return {JSONData}\n */\nexport function replace (json, { path, value }) {\n  return setIn(json, path, value)\n}\n\n/**\n * Remove an item or property\n * @param {JSONData} json\n * @param {{ path: JSONPath }} operation\n * @return {JSONData}\n */\nexport function remove (json, { path }) {\n  return deleteIn(json, path)\n}\n\n/**\n * @param {JSONData} json\n * @param {{ path: JSONPath, value: JSONData }} operation\n * @return {JSONData}\n */\nexport function add (json, { path, value }) {\n  if (isArrayItem(json, path)) {\n    return insertAt(json, path, value)\n  } else {\n    return setIn(json, path, value)\n  }\n}\n\n/**\n * Copy a value\n * @param {JSONData} json\n * @param {{ path: JSONPath, from: JSONPath }} operation\n * @return {JSONData}\n */\nexport function copy (json, { path, from }) {\n  const value = getIn(json, from)\n\n  if (isArrayItem(json, path)) {\n    return insertAt(json, path, value)\n  } else {\n    const value = getIn(json, from)\n\n    return setIn(json, path, value)\n  }\n}\n\n/**\n * Move a value\n * @param {JSONData} json\n * @param {{ path: JSONPath, from: JSONPath }} operation\n * @return {JSONData}\n */\nexport function move (json, { path, from }) {\n  const value = getIn(json, from)\n  const removedJson = deleteIn(json, from)\n\n  return isArrayItem(removedJson, path)\n    ? insertAt(removedJson, path, value)\n    : setIn(removedJson, path, value)\n}\n\n/**\n * Test whether the data contains the provided value at the specified path.\n * Throws an error when the test fails\n * @param {JSONData} json\n * @param {{ path: JSONPath, value: JSONData }} operation\n */\nexport function test (json, { path, value }) {\n  if (value === undefined) {\n    throw new Error(`Test failed: no value provided (path: \"${compileJSONPointer(path)}\")`)\n  }\n\n  if (!existsIn(json, path)) {\n    throw new Error(`Test failed: path not found (path: \"${compileJSONPointer(path)}\")`)\n  }\n\n  const actualValue = getIn(json, path)\n  if (!isEqual(actualValue, value)) {\n    throw new Error(`Test failed, value differs (path: \"${compileJSONPointer(path)}\")`)\n  }\n}\n\n/**\n * @param {JSONData} json\n * @param {JSONPath} path\n * @returns {boolean}\n */\nexport function isArrayItem (json, path) {\n  if (path.length === 0) {\n    return false\n  }\n\n  const parent = getIn(json, initial(path))\n\n  return Array.isArray(parent)\n}\n\n/**\n * Resolve the path index of an array, resolves indexes '-'\n * @param {JSONData} json\n * @param {JSONPath} path\n * @returns {JSONPath} Returns the resolved path\n */\nexport function resolvePathIndex (json, path) {\n  if (last(path) !== '-') {\n    return path\n  }\n\n  const parentPath = initial(path)\n  const parent = getIn(json, parentPath)\n\n  return parentPath.concat(parent.length)\n}\n\n/**\n * Validate a JSONPatch operation.\n * Throws an error when there is an issue\n * @param {JSONPatchOperation} operation\n */\nexport function validateJSONPatchOperation (operation) {\n  // TODO: write unit tests\n  const ops = ['add', 'remove', 'replace', 'copy', 'move', 'test']\n\n  if (!ops.includes(operation.op)) {\n    throw new Error('Unknown JSONPatch op ' + JSON.stringify(operation.op))\n  }\n\n  if (typeof operation.path !== 'string') {\n    throw new Error('Required property \"path\" missing or not a string in operation ' + JSON.stringify(operation))\n  }\n\n  if (operation.op === 'copy' || operation.op === 'move') {\n    if (typeof operation.from !== 'string') {\n      throw new Error('Required property \"from\" missing or not a string in operation ' + JSON.stringify(operation))\n    }\n  }\n}\n\n/**\n * @param {JSONData} json\n * @param {JSONPatchOperation} operation\n * @return {PreprocessedJSONPatchOperation}\n */\n// TODO: write unit tests\nexport function preprocessJSONPatchOperation (json, operation) {\n  return {\n    op: operation.op,\n    path: resolvePathIndex(json, parseJSONPointer(operation.path)),\n    from: operation.from !== undefined\n      ? parseJSONPointer(operation.from)\n      : null,\n    value: operation.value\n  }\n}\n"],"file":"immutableJSONPatch.js"}