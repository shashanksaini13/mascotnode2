"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isEqual = isEqual;
exports.strictEqual = strictEqual;
exports.initial = initial;
exports.last = last;
exports.startsWith = startsWith;
exports.isObjectOrArray = isObjectOrArray;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Test deep equality of two JSON values, objects, or arrays
 * @param {JSONData} a
 * @param {JSONData} b
 * @returns {boolean}
 */
// TODO: write unit tests
function isEqual(a, b) {
  // FIXME: this function will return false for two objects with the same keys
  //  but different order of keys
  return JSON.stringify(a) === JSON.stringify(b);
}
/**
 * Test whether two values are strictly equal
 * @param {*} a
 * @param {*} b
 * @returns {boolean}
 */


function strictEqual(a, b) {
  return a === b;
}
/**
 * Get all but the last items from an array
 * @param {Array} array
 * @return {Array}
 */
// TODO: write unit tests


function initial(array) {
  return array.slice(0, array.length - 1);
}
/**
 * Get the last item from an array
 * @param {Array} array
 * @returns {*}
 */
// TODO: write unit tests


function last(array) {
  return array[array.length - 1];
}
/**
 * Test whether array1 starts with array2
 * @param {Array} array1
 * @param {Array} array2
 * @param {function} [isEqual=strictEqual] Optional function to check equality
 */


function startsWith(array1, array2) {
  var isEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : strictEqual;

  if (array1.length < array2.length) {
    return false;
  }

  for (var i = 0; i < array2.length; i++) {
    if (!isEqual(array1[i], array2[i])) {
      return false;
    }
  }

  return true;
}
/**
 * Test whether a value is an Object or an Array (and not a primitive JSON value)
 * @param {*} value
 * @return {boolean}
 */
// TODO: write unit tests


function isObjectOrArray(value) {
  return _typeof(value) === 'object' && value !== null;
}
//# sourceMappingURL=utils.js.map