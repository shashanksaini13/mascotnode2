{"version":3,"sources":["../../src/utils.js"],"names":["isEqual","a","b","JSON","stringify","strictEqual","initial","array","slice","length","last","startsWith","array1","array2","i","isObjectOrArray","value"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,OAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;AAC7B;AACA;AACA,SAAOC,IAAI,CAACC,SAAL,CAAeH,CAAf,MAAsBE,IAAI,CAACC,SAAL,CAAeF,CAAf,CAA7B;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,WAAT,CAAsBJ,CAAtB,EAAyBC,CAAzB,EAA4B;AACjC,SAAOD,CAAC,KAAKC,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,OAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAOA,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAeD,KAAK,CAACE,MAAN,GAAe,CAA9B,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,IAAT,CAAeH,KAAf,EAAsB;AAC3B,SAAOA,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,UAAT,CAAqBC,MAArB,EAA6BC,MAA7B,EAA4D;AAAA,MAAvBb,OAAuB,uEAAbK,WAAa;;AACjE,MAAIO,MAAM,CAACH,MAAP,GAAgBI,MAAM,CAACJ,MAA3B,EAAmC;AACjC,WAAO,KAAP;AACD;;AAED,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACJ,MAA3B,EAAmCK,CAAC,EAApC,EAAwC;AACtC,QAAI,CAACd,OAAO,CAACY,MAAM,CAACE,CAAD,CAAP,EAAYD,MAAM,CAACC,CAAD,CAAlB,CAAZ,EAAoC;AAClC,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AACtC,SAAO,QAAOA,KAAP,MAAiB,QAAjB,IAA6BA,KAAK,KAAK,IAA9C;AACD","sourcesContent":["/**\r\n * Test deep equality of two JSON values, objects, or arrays\r\n * @param {JSONData} a\r\n * @param {JSONData} b\r\n * @returns {boolean}\r\n */\r\n// TODO: write unit tests\r\nexport function isEqual (a, b) {\r\n  // FIXME: this function will return false for two objects with the same keys\r\n  //  but different order of keys\r\n  return JSON.stringify(a) === JSON.stringify(b)\r\n}\r\n\r\n/**\r\n * Test whether two values are strictly equal\r\n * @param {*} a\r\n * @param {*} b\r\n * @returns {boolean}\r\n */\r\nexport function strictEqual (a, b) {\r\n  return a === b\r\n}\r\n\r\n/**\r\n * Get all but the last items from an array\r\n * @param {Array} array\r\n * @return {Array}\r\n */\r\n// TODO: write unit tests\r\nexport function initial (array) {\r\n  return array.slice(0, array.length - 1)\r\n}\r\n\r\n/**\r\n * Get the last item from an array\r\n * @param {Array} array\r\n * @returns {*}\r\n */\r\n// TODO: write unit tests\r\nexport function last (array) {\r\n  return array[array.length - 1]\r\n}\r\n\r\n/**\r\n * Test whether array1 starts with array2\r\n * @param {Array} array1\r\n * @param {Array} array2\r\n * @param {function} [isEqual=strictEqual] Optional function to check equality\r\n */\r\nexport function startsWith (array1, array2, isEqual = strictEqual) {\r\n  if (array1.length < array2.length) {\r\n    return false\r\n  }\r\n\r\n  for (let i = 0; i < array2.length; i++) {\r\n    if (!isEqual(array1[i], array2[i])) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * Test whether a value is an Object or an Array (and not a primitive JSON value)\r\n * @param {*} value\r\n * @return {boolean}\r\n */\r\n// TODO: write unit tests\r\nexport function isObjectOrArray (value) {\r\n  return typeof value === 'object' && value !== null\r\n}\r\n"],"file":"utils.js"}