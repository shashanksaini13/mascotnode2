import { existsIn, getIn } from './immutabilityHelpers.js';
import { immutableJSONPatch, isArrayItem } from './immutableJSONPatch.js';
import { compileJSONPointer } from './jsonPointer.js';
import { startsWith } from './utils.js';
/**
 * Create the inverse of a set of json patch operations
 * @param {JSONData} json
 * @param {JSONPatchDocument} operations    Array with JSON patch actions
 * @return {JSONPatchDocument} Returns the operations to revert the changes
 */

export function revertJSONPatch(json, operations) {
  var revertOperations = [];
  immutableJSONPatch(json, operations, {
    before: function before(json, operation) {
      var revertOp = REVERT_OPS[operation.op];

      if (revertOp) {
        revertOperations = revertOp(json, operation).concat(revertOperations);
      }
    }
  });
  return revertOperations;
}
var REVERT_OPS = {
  add: revertAdd,
  remove: revertRemove,
  replace: revertReplace,
  copy: revertCopy,
  move: revertMove
};
/**
 * @param {JSONData} json
 * @param {{ path: JSONPath }} operation
 * @return {JSONPatchDocument}
 */

function revertReplace(json, _ref) {
  var path = _ref.path;
  return [{
    op: 'replace',
    path: compileJSONPointer(path),
    value: getIn(json, path)
  }];
}
/**
 * @param {JSONData} json
 * @param {{ path: JSONPath }} operation
 * @return {JSONPatchDocument}
 */


function revertRemove(json, _ref2) {
  var path = _ref2.path;
  return [{
    op: 'add',
    path: compileJSONPointer(path),
    value: getIn(json, path)
  }];
}
/**
 * @param {JSONData} json
 * @param {{ path: JSONPath, value: JSONData }} operation
 * @return {JSONPatchDocument}
 */


function revertAdd(json, _ref3) {
  var path = _ref3.path,
      value = _ref3.value;

  if (isArrayItem(json, path) || !existsIn(json, path)) {
    return [{
      op: 'remove',
      path: compileJSONPointer(path)
    }];
  } else {
    return revertReplace(json, {
      path: path,
      value: value
    });
  }
}
/**
 * @param {JSONData} json
 * @param {{ path: JSONPath, value: JSONData }} operation
 * @return {JSONPatchDocument}
 */


function revertCopy(json, _ref4) {
  var path = _ref4.path,
      value = _ref4.value;
  return revertAdd(json, {
    path: path,
    value: value
  });
}
/**
 * @param {JSONData} json
 * @param {{ path: JSONPath, from: JSONPath }} operation
 * @return {JSONPatchDocument}
 */


function revertMove(json, _ref5) {
  var path = _ref5.path,
      from = _ref5.from;

  if (path.length < from.length && startsWith(from, path)) {
    // replacing the parent with the child
    return [{
      op: 'replace',
      path: compileJSONPointer(path),
      value: json
    }];
  }

  var revert = [{
    op: 'move',
    from: compileJSONPointer(path),
    path: compileJSONPointer(from)
  }];

  if (!isArrayItem(json, path) && existsIn(json, path)) {
    // the move replaces an existing value in an object
    revert = revert.concat(revertRemove(json, {
      path: path
    }));
  }

  return revert;
}
//# sourceMappingURL=revertJSONPatch.js.map