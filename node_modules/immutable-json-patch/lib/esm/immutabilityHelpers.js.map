{"version":3,"sources":["../../src/immutabilityHelpers.js"],"names":["isObjectOrArray","shallowClone","value","Array","isArray","copy","slice","Object","getOwnPropertySymbols","forEach","symbol","applyProp","object","key","updatedObject","getIn","path","i","length","undefined","setIn","createPath","updatedValue","newObject","Error","updateIn","callback","deleteIn","splice","insertAt","parentPath","index","items","TypeError","JSON","stringify","updatedItems","transform","json","updated1","updated2","before","after","concat","hasOwnProperty","call","existsIn"],"mappings":"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","sourcesContent":["/**\n * Immutability helpers\n *\n * inspiration:\n *\n * https://www.npmjs.com/package/seamless-immutable\n * https://www.npmjs.com/package/ih\n * https://www.npmjs.com/package/mutatis\n * https://github.com/mariocasciaro/object-path-immutable\n */\nimport { isObjectOrArray } from './utils.js'\n\n/**\n * Shallow clone of an Object, Array, or value\n * Symbols are cloned too.\n * @param {*} value\n * @return {*}\n */\nexport function shallowClone (value) {\n  if (Array.isArray(value)) {\n    // copy array items\n    const copy = value.slice()\n\n    // copy all symbols\n    Object.getOwnPropertySymbols(value).forEach(symbol => {\n      copy[symbol] = value[symbol]\n    })\n\n    return copy\n  } else if (typeof value === 'object') {\n    // copy object properties\n    const copy = { ...value }\n\n    // copy all symbols\n    Object.getOwnPropertySymbols(value).forEach(symbol => {\n      copy[symbol] = value[symbol]\n    })\n\n    return copy\n  } else {\n    return value\n  }\n}\n\n/**\n * Update a value in an object in an immutable way.\n * If the value is unchanged, the original object will be returned\n * @param {Object | Array} object\n * @param {string | index} key\n * @param {*} value\n * @returns {Object | Array}\n */\nexport function applyProp (object, key, value) {\n  if (object[key] === value) {\n    // return original object unchanged when the new value is identical to the old one\n    return object\n  } else {\n    const updatedObject = shallowClone(object)\n    updatedObject[key] = value\n    return updatedObject\n  }\n}\n\n/**\n * helper function to get a nested property in an object or array\n *\n * @param {Object | Array} object\n * @param {JSONPath} path\n * @return {* | undefined} Returns the field when found, or undefined when the\n *                         path doesn't exist\n */\nexport function getIn (object, path) {\n  let value = object\n  let i = 0\n\n  while (i < path.length) {\n    if (isObjectOrArray(value)) {\n      value = value[path[i]]\n    } else {\n      value = undefined\n    }\n\n    i++\n  }\n\n  return value\n}\n\n/**\n * helper function to replace a nested property in an object with a new value\n * without mutating the object itself.\n *\n * @param {Object | Array} object\n * @param {JSONPath} path\n * @param {*} value\n * @param {boolean} [createPath=false]\n *                    If true, `path` will be created when (partly) missing in\n *                    the object. For correctly creating nested Arrays or\n *                    Objects, the function relies on `path` containing a number\n *                    in case of array indexes.\n *                    If false (default), an error will be thrown when the\n *                    path doesn't exist.\n * @return {Object | Array} Returns a new, updated object or array\n */\nexport function setIn (object, path, value, createPath = false) {\n  if (path.length === 0) {\n    return value\n  }\n\n  const key = path[0]\n  const updatedValue = setIn(object ? object[key] : undefined, path.slice(1), value, createPath)\n\n  if (!isObjectOrArray(object)) {\n    if (createPath) {\n      const newObject = typeof key === 'number'\n        ? []\n        : {}\n      newObject[key] = updatedValue\n      return newObject\n    } else {\n      throw new Error('Path does not exist')\n    }\n  }\n\n  return applyProp(object, key, updatedValue)\n}\n\n/**\n * helper function to replace a nested property in an object with a new value\n * without mutating the object itself.\n *\n * @param {Object | Array} object\n * @param {JSONPath} path\n * @param {function} callback\n * @return {Object | Array} Returns a new, updated object or array\n */\nexport function updateIn (object, path, callback) {\n  if (path.length === 0) {\n    return callback(object)\n  }\n\n  if (!isObjectOrArray(object)) {\n    throw new Error('Path doesn\\'t exist')\n  }\n\n  const key = path[0]\n  const updatedValue = updateIn(object[key], path.slice(1), callback)\n  return applyProp(object, key, updatedValue)\n}\n\n/**\n * helper function to delete a nested property in an object\n * without mutating the object itself.\n *\n * @param {Object | Array} object\n * @param {JSONPath} path\n * @return {Object | Array} Returns a new, updated object or array\n */\nexport function deleteIn (object, path) {\n  if (path.length === 0) {\n    return object\n  }\n\n  if (!isObjectOrArray(object)) {\n    throw new Error('Path does not exist')\n  }\n\n  if (path.length === 1) {\n    const key = path[0]\n    if (!(key in object)) {\n      // key doesn't exist. return object unchanged\n      return object\n    } else {\n      const updatedObject = shallowClone(object)\n\n      if (Array.isArray(updatedObject)) {\n        updatedObject.splice(key, 1)\n      } else {\n        delete updatedObject[key]\n      }\n\n      return updatedObject\n    }\n  }\n\n  const key = path[0]\n  const updatedValue = deleteIn(object[key], path.slice(1))\n  return applyProp(object, key, updatedValue)\n}\n\n/**\n * Insert a new item in an array at a specific index.\n * Example usage:\n *\n *     insertAt({arr: [1,2,3]}, ['arr', '2'], 'inserted')  // [1,2,'inserted',3]\n *\n * @param {Object | Array} object\n * @param {JSONPath} path\n * @param {*} value\n * @return {Array}\n */\nexport function insertAt (object, path, value) {\n  const parentPath = path.slice(0, path.length - 1)\n  const index = path[path.length - 1]\n\n  return updateIn(object, parentPath, (items) => {\n    if (!Array.isArray(items)) {\n      throw new TypeError('Array expected at path ' + JSON.stringify(parentPath))\n    }\n\n    const updatedItems = shallowClone(items)\n    updatedItems.splice(index, 0, value)\n\n    return updatedItems\n  })\n}\n\n/**\n * Transform a JSON object, traverse over the whole object,\n * and allow replacing Objects/Arrays/values.\n * @param {JSONData} json\n * @param {function (json: JSONData, path: JSONPath) : JSONData} callback\n * @param {JSONPath} [path]\n * @return {JSONData}\n */\nexport function transform (json, callback, path = []) {\n  const updated1 = callback(json, path)\n\n  if (Array.isArray(json)) { // array\n    let updated2\n\n    for (let i = 0; i < updated1.length; i++) {\n      const before = updated1[i]\n      // we stringify the index here, so the path only contains strings and can be safely\n      // stringified/parsed to JSONPointer without loosing information.\n      // We do not want to rely on path keys being numeric/string.\n      const after = transform(before, callback, path.concat(i + ''))\n      if (after !== before) {\n        if (!updated2) {\n          updated2 = shallowClone(updated1)\n        }\n        updated2[i] = after\n      }\n    }\n\n    return updated2 || updated1\n  } else if (json && typeof json === 'object') { // object\n    let updated2\n\n    for (const key in updated1) {\n      if (Object.hasOwnProperty.call(updated1, key)) {\n        const before = updated1[key]\n        const after = transform(before, callback, path.concat(key))\n        if (after !== before) {\n          if (!updated2) {\n            updated2 = shallowClone(updated1)\n          }\n          updated2[key] = after\n        }\n      }\n    }\n\n    return updated2 || updated1\n  } else { // number, string, boolean, null\n    return updated1\n  }\n}\n\n/**\n * Test whether a path exists in a JSON object\n * @param {JSONData} json\n * @param {JSONPath} path\n * @return {boolean} Returns true if the path exists, else returns false\n * @private\n */\nexport function existsIn (json, path) {\n  if (json === undefined) {\n    return false\n  }\n\n  if (path.length === 0) {\n    return true\n  }\n\n  return existsIn(json[path[0]], path.slice(1))\n}\n"],"file":"immutabilityHelpers.js"}